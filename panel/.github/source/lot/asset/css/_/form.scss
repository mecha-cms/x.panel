.button,
.input,
.select,
.textarea {
  background: var(--fill-input);
  border-radius: var(--radius-input);
  border: 1px solid var(--stroke-input);
  box-shadow: var(--shadow-input);
  color: var(--color-input);
  display: inline-block;
  height: calc(var(--y) * 1.5);
  line-height: calc((var(--y) * 1.5) - (var(--y) / 2) - 2px); // height - (padding-top + padding-bottom) - (border-top-width + border-bottom-width)
  padding: calc(var(--y) / 4) calc(var(--x) / 2);
  position: relative;
  text-align: left;
  vertical-align: middle;
  width: calc(var(--x) * 8);
  z-index: 0;
  $states: hover, focus, active, disabled;
  @each $state in $states {
    &:#{$state} {
      background: var(--fill-input--#{$state});
      border-radius: var(--radius-input--#{$state});
      box-shadow: var(--shadow-input--#{$state});
      color: var(--color-input--#{$state});
    }
  }
}

.output {
  background: var(--fill-output);
  border-radius: var(--radius-output);
  border: 0 solid var(--stroke-output);
  box-shadow: var(--shadow-output);
  color: var(--color-output);
  display: inline-block;
  font: inherit;
  height: auto;
  line-height: var(--h);
  padding: calc(var(--y) / 4) 0;
  position: relative;
  text-align: inherit;
  vertical-align: middle;
  width: auto;
  z-index: 0;
  $states: hover, focus, active;
  @each $state in $states {
    &:#{$state} {
      background: var(--fill-output--#{$state});
      border-radius: var(--radius-output--#{$state});
      box-shadow: var(--shadow-output--#{$state});
      color: var(--color-output--#{$state});
    }
  }
}

.button {
  width: auto;
  text-align: center;
  background: var(--fill-button);
  box-shadow: var(--shadow-button);
  border-radius: var(--radius-button);
  border-color: var(--stroke-button);
  color: var(--color-button);
  $states: hover, focus, active, disabled;
  @each $state in $states {
    &:#{$state} {
      background: var(--fill-button--#{$state});
      border-color: var(--stroke-button--#{$state});
      border-radius: var(--radius-button--#{$state});
      box-shadow: var(--shadow-button--#{$state});
      color: var(--color-button--#{$state});
    }
  }
  .title {
    > .icon {
      &:first-child {
        margin-left: calc(var(--x) / -4);
      }
      &:last-child {
        margin-right: calc(var(--x) / -4);
      }
      &.caret {
        margin-right: calc(var(--x) / -4);
        margin-left: calc(var(--x) / -4);
      }
    }
  }
}

.button[href] {
  @extend .button;
}

.button,
details > summary,
label {
  @include user-select(none);
  cursor: pointer;
}

.input,
.select,
.textarea {
  $states: read-write, hover, focus, active, invalid, disabled, read-only;
  @each $state in $states {
    &:#{$state} {
      background: var(--fill-input--#{$state});
      border-color: var(--stroke-input--#{$state});
      box-shadow: var(--shadow-input--#{$state});
      color: var(--color-input--#{$state});
    }
  }
}

.button {
  &.is\:text {
    background: none;
    border: 0;
    color: var(--color-link);
    $states: hover, focus, active;
    @each $state in $states {
      &:#{$state} {
        background: none;
        color: var(--color-link--#{$state});
      }
    }
  }
}

.input,
.select,
.textarea {
  &.is\:locked {
    @extend .input:read-only;
  }
  &.not\:active {
    @extend .input:disabled;
  }
}

.input {
  &[type='color'],
  &[type='file'],
  &[type='range'] {
    cursor: pointer;
  }
}

.input {
  &[type='file'],
  &[type='range'] {
    background: none;
    border: 0;
    box-shadow: none;
    line-height: var(--y);
    padding: 0;
  }
}

.input {
  &[type='checkbox'],
  &[type='color'],
  &[type='image'],
  &[type='radio'] {
    background: none;
    border: 0;
    cursor: pointer;
    height: 1em;
    line-height: 1em;
    margin: 0;
    padding: 0;
    width: 1em;
    &.is\:locked {
      pointer-events: none;
    }
  }
  &[type='color'] {
    height: calc(var(--y) * 1.5);
    width: calc(var(--x) * 1.5);
    &::-webkit-color-swatch-wrapper {
      padding: 0;
    }
  }
  &[type='image'] {
    box-shadow: none;
    height: auto;
    width: auto;
  }
  &[type='number'] {
    &::-webkit-inner-spin-button,
    &::-webkit-outer-spin-button {
      @include appearance(none);
      margin: 0;
    }
  }
  &[type='number'],
  &[type='search'] {
    @include appearance(textfield);
  }
}

.select {
  cursor: pointer;
  &[multiple] {
    height: auto;
    optgroup,
    option {
      background: none;
    }
  }
  optgroup,
  option {
    background: var(--fill-input);
    color: var(--color-input);
    margin: 0;
    padding: 0;
    $states: disabled;
    @each $state in $states {
      &:#{$state} {
        background: var(--fill-input--#{$state});
        color: var(--fill-input--#{$state});
      }
    }
  }
  optgroup {
    font-weight: bold;
    option {
      font-weight: normal;
      padding-left: calc(var(--x) / 3);
    }
  }
  &:not([multiple]) {
    padding-bottom: 0;
    padding-top: 0;
  }
}

.width {
  display: flex;
  width: 100%;
}

.textarea {
  min-height: calc(var(--y) * 3.75);
  overflow: auto;
  resize: vertical;
  &.height {
    height: calc(var(--y) * 10.75);
  }
}

label {
  > input {
    &[type='checkbox'],
    &[type='radio'] {
      + span {
        display: inline-flex;
        vertical-align: middle;
      }
    }
  }
}

.button,
.input,
.select,
.textarea {
  &:focus {
    z-index: 1;
  }
}

// Custom appearance for modern browser(s)
.input {
  &[type='checkbox'],
  &[type='radio'] {
    @include appearance(none);
    background: var(--fill-button);
    border-radius: var(--radius-button);
    border: 0 solid var(--stroke-button);
    box-shadow: var(--shadow-button);
    color: var(--color-button);
    &::before {
      background: var(--color-button);
      bottom: 2px;
      content: "";
      left: 2px;
      position: absolute;
      right: 2px;
      top: 2px;
    }
    $states: hover, focus, active, disabled;
    @each $state in $states {
      &:#{$state} {
        background: var(--fill-button--#{$state});
        border-color: var(--stroke-button--#{$state});
        box-shadow: var(--shadow-button--#{$state});
        color: var(--color-button--#{$state});
      }
    }
    &:checked {
      &::before {
        background: none;
      }
    }
  }
  &[type='checkbox'] {
    &:checked {
      &::before {
        @include transform(rotate(45deg));
        border-bottom: 2px solid var(--color-button);
        border-right: 2px solid var(--color-button);
        bottom: 4px;
        left: 5px;
        right: 5px;
        top: 1px;
        visibility: visible;
      }
    }
    $states: hover, focus, active, disabled;
    @each $state in $states {
      &:#{$state} {
        &::before {
          border-bottom-color: var(--color-button--#{$state});
          border-right-color: var(--color-button--#{$state});
        }
      }
    }
  }
  &[type='radio'] {
    &:checked {
      &::before {
        border: 2px solid var(--color-button);
        visibility: visible;
      }
    }
    &,
    &::before {
      border-radius: 100%;
    }
    $states: hover, focus, active, disabled;
    @each $state in $states {
      &:#{$state} {
        &::before {
          border-color: var(--color-button--#{$state});
        }
      }
    }
  }
  &[type='range'] {
    @include appearance(none);
    &::-webkit-slider-runnable-track {
      -webkit-appearance: none;
      background: var(--stroke-input);
      border: 0;
      height: 2px;
      overflow: visible;
    }
    &::-webkit-slider-thumb {
      -webkit-appearance: none;
      background: var(--fill-button);
      border-color: var(--stroke-button);
      border-radius: var(--radius-button);
      box-shadow: var(--shadow-button);
      color: var(--color-button);
      height: var(--y);
      margin-top: calc(var(--y) / -2) + 1px; // Magic! :(
      width: calc(var(--x) / 2);
    }
    &::-moz-range-track {
      background: var(--stroke-input);
      border: 0;
      height: 2px;
    }
    &::-moz-range-thumb {
      background: var(--fill-button);
      border-color: var(--stroke-button);
      border-radius: var(--radius-button);
      box-shadow: var(--shadow-button);
      color: var(--color-button);
      height: var(--y);
      margin-top: calc(var(--y) / -2) + 1px; // Magic! :(
      width: calc(var(--x) / 2);
    }
  }
  $states: hover, focus, active, disabled;
  @each $state in $states {
    &:#{$state} {
      &::-webkit-slider-runnable-track {
        background: var(--stroke-input--#{$state});
      }
      &::-moz-range-track {
        background: var(--stroke-input--#{$state});
      }
      &::-webkit-slider-thumb {
        background: var(--fill-button--#{$state});
        border-color: var(--stroke-button--#{$state});
        border-radius: var(--radius-button--#{$state});
        box-shadow: var(--shadow-button--#{$state});
        color: var(--color-button--#{$state});
      }
      &::-moz-range-thumb {
        background: var(--fill-button--#{$state});
        border-color: var(--stroke-button--#{$state});
        border-radius: var(--radius-button--#{$state});
        box-shadow: var(--shadow-button--#{$state});
        color: var(--color-button--#{$state});
      }
    }
  }
}