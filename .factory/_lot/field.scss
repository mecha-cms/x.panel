@use '../_content/any' as *;

@mixin field {
  .lot\:field {
    display: flex;
    gap: 0 var(--x);
    .description {
      @extend .small;
      display: block;
      font-size: calc(var(--z) * 0.75);
      line-height: calc(var(--y) / 1.5);
      margin: calc(var(--y) / 3) 0 0;
      code {
        font-size: calc(var(--z) * 0.65);
      }
    }
    &.not\:active {
      .description {
        color: inherit;
      }
    }
    > label {
      display: block;
      overflow: hidden;
      padding: calc(var(--y) / 4) 0;
      text-align: right;
      text-overflow: ellipsis;
      white-space: nowrap;
      width: calc(var(--x) * 5);
      + div {
        display: block;
        flex: 1;
        min-width: 0; // <https://stackoverflow.com/a/66689926/1163000>
        position: relative;
        .with\:fields {
          display: inline-flex;
          position: relative;
          vertical-align: middle;
          a {
            &:where(:any-link) {
              .fix {
                cursor: pointer;
              }
            }
          }
          &.has\:height,
          &.has\:width {
            display: flex;
            flex-direction: row;
          }
          &.has\:height {
            // This prevents `.lot:field.type:content`’s description from being pushed down due to the 100% height of its
            // previous container (this very container) that has a `.has:height` class on it. The default `.has:height`
            // class gives the element’s height to be 100%
            height: auto;
          }
          &.has\:tasks {
            .lot\:tasks {
              background: var(--fill-input);
              background-clip: padding-box;
              border: 1px solid transparent;
              bottom: 0;
              gap: 1px; // border-x-width
              margin: 0;
              position: absolute;
              right: 0;
              top: 0;
              z-index: 2;
              > * {
                padding: 0 calc((var(--x) / 6) + 1px); // 0 (($x / 6) + border-x-width)
                position: relative;
                + * {
                  &::after {
                    border: 1px solid;
                    border-color: var(--stroke-input);
                    border-width: 0 0 0 1px;
                    bottom: 0;
                    content: "";
                    opacity: 0.5;
                    position: absolute;
                    right: 100%;
                    top: 0;
                  }
                }
              }
              .title {
                span {
                  padding: 0 calc(var(--x) / 6);
                }
                svg {
                  + span {
                    padding-left: 0;
                  }
                }
              }
              &::after {
                border: 1px solid;
                border-color: var(--stroke-input);
                border-width: 0 0 0 1px;
                bottom: 0;
                content: "";
                opacity: 0.5;
                position: absolute;
                right: 100%;
                top: 0;
              }
            }
            :focus {
              + .lot\:tasks {
                background: var(--fill-input--focus, var(--fill-input));
                background-clip: padding-box;
                > * {
                  &::after {
                    border-color: var(--stroke-input--focus, var(--stroke-input));
                  }
                }
                &::after {
                  border-color: var(--stroke-input--focus, var(--stroke-input));
                }
              }
            }
            @each $v in (in-range, invalid, out-of-range, valid) {
              :#{$v}:focus {
                + .lot\:tasks {
                  background: var(--fill-input--#{$v}, var(--fill-input--focus, var(--fill-input)));
                  background-clip: padding-box;
                  > * {
                    &::after {
                      border-color: var(--stroke-input--#{$v}, var(--stroke-input--focus, var(--stroke-input)));
                    }
                  }
                  &::after {
                    border-color: var(--stroke-input--#{$v}, var(--stroke-input--focus, var(--stroke-input)));
                  }
                }
              }
            }
          }
          > * {
            + * {
              margin-left: -1px;
            }
          }
          > .has\:width {
            flex: 1;
            min-width: 0; // <https://stackoverflow.com/a/66689926/1163000>
            width: auto;
          }
          .fix {
            @include user-select(none);
            background: var(--fill-fix, var(--fill-input, var(--fill, none)));
            border: 1px solid;
            border-color: var(--stroke-fix, var(--stroke-input, var(--stroke, transparent)));
            color: var(--color-fix, var(--color-output, var(--color, inherit)));
            cursor: default;
            height: calc(var(--y) * 1.5);
            line-height: calc((var(--y) * 1.5) - (var(--y) / 2) - 2px);
            max-width: 50%;
            min-width: 0;
            overflow: hidden;
            padding: calc(var(--y) / 4) calc(var(--x) / 2);
            position: relative;
            text-align: left;
            text-overflow: ellipsis;
            white-space: nowrap;
            width: auto;
            &.icon {
              min-width: calc(var(--x) * 1.5);
              padding: calc((var(--y) / 6) + 1px) 0; // (($y / 6) + border-y-width) 0
              width: calc(var(--x) * 1.5);
            }
          }
        }
        .with\:options {
          display: block;
          padding: calc(var(--y) / 4) 0;
        }
      }
    }
  }
}

@mixin field-blob {
  .lot\:field.type\:blob {
    > label {
      + div {
        .input {
          border: 1px dashed;
          border-color: var(--stroke, transparent);
          height: auto;
          line-height: normal;
          padding: var(--y) var(--x);
          @each $v in (hover, focus, active, disabled) {
            &:#{$v} {
              border-color: var(--stroke--#{$v}, var(--stroke, transparent));
            }
          }
        }
      }
    }
  }
}

@mixin field-blobs {
  .lot\:field.type\:blobs {
    @extend .lot\:field, .type\:blob;
  }
}

@mixin field-buttons {
  .lot\:field.type\:buttons {
    > label {
      + div {
        .with\:options {
          padding: {
            bottom: 0;
            top: 0;
          }
          &.has\:gap {
            gap: calc(var(--y) / 4) calc(var(--x) / 4);
          }
          &.is\:flex {
            display: inline-flex;
          }
        }
      }
    }
  }
}

@mixin field-colors {
  .lot\:field.type\:colors {
    @extend .lot\:field, .type\:item;
    > label {
      + div {
        .with\:options {
          padding: {
            bottom: 0;
            top: 0;
          }
        }
      }
    }
  }
}

@mixin field-item {
  .lot\:field.type\:item {
    .with\:options {
      height: auto;
      max-height: 100%;
      &.has\:gap {
        gap: 0 var(--x);
      }
      &.is\:flex {
        display: flex;
        flex-wrap: wrap;
      }
      > label {
        align-items: center;
        display: inline-flex;
        gap: 0 calc(var(--x) / 3);
        white-space: nowrap;
      }
    }
  }
}

@mixin field-items {
  .lot\:field.type\:items {
    @extend .lot\:field, .type\:item;
  }
}

@mixin field-option {
  $name: option-picker;
  .#{$name} {
    background: var(--fill-option-picker);
    border-color: var(--stroke-option-picker);
    border-radius: var(--arc-option-picker);
    box-shadow: var(--shadow-option-picker);
    color: var(--color-option-picker);
    display: inline-flex;
    &.has\:width {
      display: flex;
    }
    &:hover {
      background: var(--fill-option-picker--hover, var(--fill-option-picker));
      border-color: var(--stroke-option-picker--hover, var(--stroke-option-picker));
      color: var(--color-option-picker--hover, var(--color-option-picker));
    }
    &:focus,
    &:focus-within {
      @extend :focus-visible;
      background: var(--fill-option-picker--focus, var(--fill-option-picker));
      border-color: var(--stroke-option-picker--focus, var(--stroke-option-picker));
      color: var(--color-option-picker--focus, var(--color-option-picker));
    }
    &:active {
      background: var(--fill-option-picker--active, var(--fill-option-picker));
      border-color: var(--stroke-option-picker--active, var(--stroke-option-picker));
      color: var(--color-option-picker--active, var(--color-option-picker));
    }
    &[aria-readonly] {
      background: var(--fill-option-picker--read-only, var(--fill-option-picker));
      border-color: var(--stroke-option-picker--read-only, var(--stroke-option-picker));
      color: var(--color-option-picker--read-only, var(--color-option-picker));
    }
    &[aria-disabled] {
      background: var(--fill-option-picker--disabled, var(--fill-option-picker));
      border-color: var(--stroke-option-picker--disabled, var(--stroke-option-picker));
      color: var(--color-option-picker--disabled, var(--color-option-picker));
    }
    &__arrow,
    &__arrow:focus {
      border-width: 0;
      outline: 0;
      padding: 0;
    }
    &__flex {
      gap: 0;
      padding: 0;
    }
    &__option {
      background: var(--fill-option-picker__option);
      border-color: var(--stroke-option-picker__option);
      color: var(--color-option-picker__option);
      padding: 0 calc(var(--x) / 2);
      &,
      &:hover,
      &:focus {
        border: 0;
        outline: 0;
      }
      &:active {
        background: var(--fill-option-picker__option--active, var(--fill-option-picker__option));
        border-color: var(--stroke-option-picker__option--active, var(--stroke-option-picker__option));
        color: var(--color-option-picker__option--active, var(--color-option-picker__option));
      }
      &[aria-selected] {
        background: var(--fill-option-picker__option--selected, var(--fill-option-picker__option));
        border-color: var(--stroke-option-picker__option--selected, var(--stroke-option-picker__option));
        color: var(--color-option-picker__option--selected, var(--color-option-picker__option));
      }
      // Hover over the selected option will change the selected color to the hover color
      &:hover {
        background: var(--fill-option-picker__option--hover, var(--fill-option-picker__option));
        border-color: var(--stroke-option-picker__option--hover, var(--stroke-option-picker__option));
        color: var(--color-option-picker__option--hover, var(--color-option-picker__option));
      }
      &[aria-disabled] {
        background: var(--fill-option-picker__option--disabled, var(--fill-option-picker__option));
        border-color: var(--stroke-option-picker__option--disabled, var(--stroke-option-picker__option));
        color: var(--color-option-picker__option--disabled, var(--color-option-picker__option));
      }
    }
    &__options {
      background: inherit;
      border-color: inherit;
      box-shadow: var(--shadow-option-picker__options);
      color: inherit;
      gap: 0;
      line-height: var(--h);
      padding: 0;
      &-lot {
        flex-wrap: nowrap;
        gap: 0;
        padding: 0;
      }
      &:not(:hover) {
        .#{$name}__option {
          &:focus,
          &:focus-within {
            background: var(--fill-option-picker__option--focus, var(--fill-option-picker__option));
            border-color: var(--stroke-option-picker__option--focus, var(--stroke-option-picker__option));
            color: var(--color-option-picker__option--focus, var(--color-option-picker__option));
          }
          // Set the selected and focused option to the hover color, unless pointer is hovering over the option parent but not over this option
          &[aria-selected] {
            &:focus,
            &:focus-within {
              background: var(--fill-option-picker__option--hover, var(--fill-option-picker__option));
              border-color: var(--stroke-option-picker__option--hover, var(--stroke-option-picker__option));
              color: var(--color-option-picker__option--hover, var(--color-option-picker__option));
            }
          }
        }
      }
    }
    &__value,
    &__value:focus {
      border: 0;
      outline: 0;
      padding: 0;
    }
  }
}

@font-face {
  font-display: swap;
  font-family: tag-picker__x;
  font-style: normal;
  font-weight: normal;
  src: url("data:font/woff2;charset=utf-8;base64,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") format("woff2");
}

@mixin field-query {
  $name: tag-picker;
  .#{$name} {
    background: var(--fill-tag-picker);
    border-color: var(--stroke-tag-picker);
    border-radius: var(--arc-tag-picker);
    box-shadow: var(--shadow-tag-picker);
    color: var(--color-tag-picker);
    display: inline-flex;
    height: auto;
    min-height: calc(var(--h) + var(--y) / 2);
    padding: calc(var(--y) / 6);
    &.has\:width {
      display: flex;
    }
    &:hover {
      background: var(--fill-tag-picker--hover, var(--fill-tag-picker));
      border-color: var(--stroke-tag-picker--hover, var(--stroke-tag-picker));
      color: var(--color-tag-picker--hover, var(--color-tag-picker));
    }
    &:focus,
    &:focus-within {
      @extend :focus-visible;
      background: var(--fill-tag-picker--focus, var(--fill-tag-picker));
      border-color: var(--stroke-tag-picker--focus, var(--stroke-tag-picker));
      color: var(--color-tag-picker--focus, var(--color-tag-picker));
    }
    &:active {
      background: var(--fill-tag-picker--active, var(--fill-tag-picker));
      border-color: var(--stroke-tag-picker--active, var(--stroke-tag-picker));
      color: var(--color-tag-picker--active, var(--color-tag-picker));
    }
    &[aria-readonly] {
      background: var(--fill-tag-picker--read-only, var(--fill-tag-picker));
      border-color: var(--stroke-tag-picker--read-only, var(--stroke-tag-picker));
      color: var(--color-tag-picker--read-only, var(--color-tag-picker));
    }
    &[aria-disabled] {
      background: var(--fill-tag-picker--disabled, var(--fill-tag-picker));
      border-color: var(--stroke-tag-picker--disabled, var(--stroke-tag-picker));
      color: var(--color-tag-picker--disabled, var(--color-tag-picker));
    }
    &__flex {
      gap: calc(var(--x) / 6);
      overflow: visible; // So that per-tag shadow does not cut off
      padding: 0;
    }
    &__tag,
    &__text {
      border-color: transparent;
      padding: 0 calc((var(--x) / 3) - 1px);
    }
    &__tag {
      background: var(--fill-tag-picker__tag);
      border-color: var(--stroke-tag-picker__tag);
      border-radius: var(--arc-tag-picker__tag);
      box-shadow: var(--shadow-tag-picker__tag);
      gap: calc(var(--x) / 6);
      &:focus {
        background: var(--fill-tag-picker__tag--focus);
        border-color: var(--stroke-tag-picker__tag--focus);
        border-radius: var(--arc-tag-picker__tag--focus);
        box-shadow: var(--shadow-tag-picker__tag--focus);
        outline: 0;
      }
      &[aria-pressed] {
        background: var(--fill-tag-picker__tag--selected);
        border-color: var(--stroke-tag-picker__tag--selected);
        border-radius: var(--arc-tag-picker__tag--selected);
        box-shadow: var(--shadow-tag-picker__tag--selected);
        outline: 0;
      }
    }
    &__text {
      span {
        &:focus {
          outline: 0;
        }
        + span {
          color: inherit;
          opacity: 0.5;
        }
      }
    }
    &__x {
      align-items: center;
      color: var(--color-tag-picker__x);
      display: flex;
      font: inherit;
      font-family: tag-picker__x;
      justify-content: center;
      line-height: 1;
      text-align: center;
      @each $v in (hover, focus, active) {
        color: var(--color-tag-picker__x--#{$v}, var(--color-tag-picker__x, var(--color--#{$v}, var(--color, inherit))));
      }
      &::after {
        border: 0;
        content: '\d7';
        font: inherit;
        height: auto;
        position: static;
        transform: none;
        width: auto;
      }
      &::before {
        display: none;
      }
    }
  }
}