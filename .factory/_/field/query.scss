$name: tag-picker;

.#{$name} {
  height: auto;
  min-height: calc(var(--y) * 1.5);
  padding: calc(var(--y) / 12) calc(var(--x) / 12);
  width: var(--width-input);
  &--focus {
    &:not(.is\:fix) {
      @extend :focus-visible;
      box-shadow: var(--shadow-#{$name}--focus, var(--shadow-#{$name}));
    }
  }
  &.has\:width {
    display: flex;
    width: 100%;
  }
  &__input {
    span {
      min-height: var(--y);
    }
  }
  &__tag {
    margin: calc(var(--y) / 12) calc(var(--x) / 12);
    padding: 0 calc(var(--z) / 2);
    // Fix link color specifity
    &-x:any-link {
      color: var(--color-tag-picker__tag-x);
      @each $v in (hover, focus, active) {
        &:#{$v} {
          color: var(--color-tag-picker__tag-x--#{$v}, var(--color-tag-picker__tag-x));
        }
      }
    }
  }
  &__source {
    position: fixed;
    &:not(:read-only) {
      // This is a fake `<input>` element with `tabindex`, so this will always match with the `:read-only` pseudo class
      // But this element does not mean to be styled as a read-only `<input>` element, so we need to normalize it!
      + .#{$name} {
        --color-input--read-only: var(--color-input);
        --fill-input--read-only: var(--fill-input);
        --shadow-input--read-only: var(--shadow-input);
        --stroke-input--read-only: var(--stroke-input);
      }
    }
    + .#{$name} {
      margin-left: 0 !important;
      .#{$name}__tag {
        border: 1px solid transparent;
        line-height: calc(var(--y) - 2px);
      }
    }
  }
}