.lot\:field {
  display: flex;
  gap: 0 var(--x);
  .description {
    @extend .small;
    display: block;
    font-size: calc(var(--z) * .75);
    line-height: calc(var(--y) / 1.5);
    margin: calc(var(--y) / 3) 0 0;
    code {
      font-size: calc(var(--z) * .65);
    }
  }
  &.not\:active {
    .description {
      color: inherit;
    }
  }
  > label {
    display: block;
    overflow: hidden;
    padding: calc(var(--y) / 4) 0;
    text-align: right;
    text-overflow: ellipsis;
    white-space: nowrap;
    width: calc(var(--x) * 5);
    + div {
      display: block;
      flex: 1;
      min-width: 0; // <https://stackoverflow.com/a/66689926/1163000>
      position: relative;
      .with\:fields {
        display: inline-flex;
        position: relative;
        vertical-align: middle;
        a {
          &:where(:any-link) {
            .fix {
              cursor: pointer;
            }
          }
        }
        &.has\:height,
        &.has\:width {
          display: flex;
          flex-direction: row;
        }
        &.has\:height {
          // This prevents `.lot:field.type:content`’s description from being pushed down due to the 100% height of its
          // previous container (this very container) that has a `.has:height` class on it. The default `.has:height`
          // class gives the element’s height to be 100%
          height: auto;
        }
        &.has\:tasks {
          .lot\:tasks {
            background: var(--fill-input);
            background-clip: padding-box;
            border: 1px solid transparent;
            bottom: 0;
            gap: 1px; // border-x-width
            margin: 0;
            position: absolute;
            right: 0;
            top: 0;
            z-index: 2;
            > * {
              padding: 0 calc((var(--x) / 6) + 1px); // 0 (($x / 6) + border-x-width)
              position: relative;
              + * {
                &::after {
                  border: 1px solid;
                  border-color: var(--stroke-input);
                  border-width: 0 0 0 1px;
                  bottom: 0;
                  content: "";
                  opacity: 0.5;
                  position: absolute;
                  right: 100%;
                  top: 0;
                }
              }
            }
            .title {
              span {
                padding: 0 calc(var(--x) / 6);
              }
              svg {
                + span {
                  padding-left: 0;
                }
              }
            }
            &::after {
              border: 1px solid;
              border-color: var(--stroke-input);
              border-width: 0 0 0 1px;
              bottom: 0;
              content: "";
              opacity: 0.5;
              position: absolute;
              right: 100%;
              top: 0;
            }
          }
          :focus {
            + .lot\:tasks {
              > * {
                &::after {
                  border-color: var(--stroke-input--focus, var(--stroke-input));
                }
              }
              &::after {
                border-color: var(--stroke-input--focus, var(--stroke-input));
              }
            }
          }
        }
        > * {
          + * {
            margin-left: -1px;
          }
        }
        > .has\:width {
          flex: 1;
          min-width: 0; // <https://stackoverflow.com/a/66689926/1163000>
          width: auto;
        }
        .fix {
          @include user-select(none);
          background: var(--fill-fix, var(--fill-input, var(--fill, none)));
          border: 1px solid;
          border-color: var(--stroke-fix, var(--stroke-input, var(--stroke, transparent)));
          color: var(--color-fix, var(--color-output, var(--color, inherit)));
          cursor: default;
          height: calc(var(--y) * 1.5);
          line-height: calc((var(--y) * 1.5) - (var(--y) / 2) - 2px);
          max-width: 50%;
          min-width: 0;
          overflow: hidden;
          padding: calc(var(--y) / 4) calc(var(--x) / 2);
          position: relative;
          text-align: left;
          text-overflow: ellipsis;
          white-space: nowrap;
          width: auto;
          &.icon {
            min-width: calc(var(--x) * 1.5);
            padding: calc((var(--y) / 6) + 1px) 0; // (($y / 6) + border-y-width) 0
            width: calc(var(--x) * 1.5);
          }
        }
      }
      .with\:options {
        display: block;
        padding: calc(var(--y) / 4) 0;
      }
    }
  }
}

@import './field/blob.scss';
@import './field/blobs.scss';
@import './field/buttons.scss';
@import './field/colors.scss';
@import './field/item.scss';
@import './field/items.scss';
@import './field/option.scss';
@import './field/query.scss';